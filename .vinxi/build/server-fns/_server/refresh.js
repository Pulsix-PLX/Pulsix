import u from"vite-plugin-node-polyfills/shims/process";import f from"bcryptjs";import{a as E,h,u as d}from"./assets/fetchEvent-BW7O4Ysp.js";import{d as c}from"./assets/db.server-CDeyn5Z_.js";import{g as p}from"./assets/utils-Be6c5Kfn.js";import{j as i}from"./assets/response-CbUr9JDj.js";import"h3";import"vite-plugin-node-polyfills/shims/global";import"node:async_hooks";import"pg";import"./assets/server-fns-runtime-DEO2-sKc.js";import"solid-js/web";import"solid-js/web/storage";import"jose";import"jsonwebtoken";import"uuid";async function l(t,r){const o=r!=null?String(r):"unknown";console.warn(`Invalidating session/token for userId: ${o}`);const a={httpOnly:!0,secure:!0,sameSite:"strict",path:"/"};try{h(t.nativeEvent,"refresh_token",{...a,maxAge:-1}),console.log("[invalidateSession] Refresh token cookie deletion instruction sent.")}catch(n){console.error("[invalidateSession] Error clearing refresh token cookie:",n)}if(r!=null&&c)try{const e=await c.query("DELETE FROM auth.active_sessions WHERE user_id = $1",[r]);console.log(`[invalidateSession] Invalidated DB refresh tokens/sessions for user ${r}. Rows: ${e.rowCount}`)}catch(n){console.error(`[invalidateSession] Error invalidating DB tokens/sessions for user ${r}:`,n)}else console.log("[invalidateSession] No valid userId provided for DB invalidation.");try{await(await d(t.nativeEvent,{password:u.env.SESSION_SECRET,name:u.env.JWT_ISSUER,cookie:{httpOnly:!0,secure:!0,sameSite:"lax"}})).clear(),console.log("[invalidateSession] Server-side session (useSession) cleared.")}catch(n){console.error("[invalidateSession] Error clearing server-side session:",n)}}async function b(t){console.log("API Route: /api/auth/refresh [POST] hit");let r;try{if(r=E(t.nativeEvent,"refresh_token"),!r)return console.log("/api/auth/refresh [REFRESH] Cookie refresh_token non trovato."),i({message:"Authentication required (missing refresh token)."},{status:401})}catch(e){return console.error("Errore lettura cookie refresh_token:",e),i({message:"Error reading authentication token."},{status:500})}let o=null,a=null;try{const e=await c.query("SELECT user_id, token_hash, expires_at FROM auth.active_sessions WHERE expires_at > NOW()");console.log(`Refresh: Found ${e.rowCount} potential tokens to check.`);for(const s of e.rows){if(!s.token_hash)continue;if(await f.compare(r,s.token_hash)){o=s.user_id,a=s,console.log(`Refresh: bcrypt match found for user ${o}`);break}}if(!o||!a){console.log("/api/auth/refresh [REFRESH] Nessun refresh token valido corrispondente trovato nel DB dopo verifica.");try{h(t.nativeEvent,"refresh_token",{path:"/",httpOnly:!0,secure:!0,sameSite:"strict",maxAge:-1})}catch(s){console.error("Failed to delete potentially invalid refresh token cookie",s)}return i({message:"Session not found or invalid."},{status:401})}}catch(e){return console.error("Errore critico durante verifica refresh token (iterazione):",e),await l(t,null),i({message:"Internal server error during refresh validation."},{status:500})}try{const e=await c.query("SELECT state FROM auth.users WHERE id = $1",[o]);if(e.rows.length===0)return console.warn(`Refresh: User ${o} associated with valid refresh token not found in users table. Invalidating session.`),await l(t,o),i({message:"User associated with token no longer exists.",code:"USER_NOT_FOUND"},{status:401});const s=e.rows[0].state;if(s==="suspended"||s==="blocked")return console.warn(`Refresh: Tentativo di refresh per utente ${o} con stato ${s}. Accesso negato e logout forzato.`),await l(t,o),i({message:`User account is ${s}. Session terminated.`,code:`USER_${s.toUpperCase()}`},{status:403})}catch(e){return console.error(`Refresh: Errore DB durante controllo stato utente ${o}:`,e),await l(t,o),i({message:"Internal server error during user state check."},{status:500})}const n=p(o);try{await c.query("UPDATE auth.active_sessions SET last_active = CURRENT_TIMESTAMP WHERE user_id = $1 AND token_hash = $2",[o,a.token_hash])}catch(e){console.warn("Impossibile aggiornare last_active (non critico):",e)}try{const e=await d(t.nativeEvent,{password:u.env.SESSION_SECRET,name:u.env.JWT_ISSUER,cookie:{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:86400}})}catch(e){console.error("Refresh: Errore aggiornamento sessione (useSession):",e)}return console.log(`Refresh: Nuovo access token generato per utente ${o}`),i({accessToken:n})}export{b as POST};
