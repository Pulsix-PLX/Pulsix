import{c as g}from"./store-EkIb7068.js";const[e,t]=g({step:"upload",walletId:null,data:null,originalData:null,history:[],mappingResult:null,errorMessage:null});function d(){console.log("CONTEXT ACTION: reset totale."),t({step:"upload",walletId:null,data:null,originalData:null,history:[],mappingResult:null,errorMessage:null})}function T(o,s){console.log("CONTEXT ACTION: initializeFileData");const n=o.rows.map(a=>({...a})),l=[...o.headers,"PulsixCategory","PulsixSubCategory"];t("data",{headers:l,rows:n,length:o.rows.length}),t("originalData",{headers:l,rows:n,length:o.rows.length}),t("history",[]),u("preview"),t("walletId",s),t("errorMessage",null),t("mappingResult",null),c()}function c(){console.log("CONTEXT ACTION: logContext ->",e)}function u(o){console.log(`CONTEXT ACTION: setCurrentStep -> ${o}`),t("step",o)}function C(o){console.log(`CONTEXT ACTION: setErrorMessage -> ${o}`),t("errorMessage",o)}const r=150;function p(o){const s=e.data?.rows;if(!s){console.error("CONTEXT ACTION (updateRowsWithHistory): Tentativo di aggiornare la history ma context.data.rows non è definito."),t("data","rows",o),t("data","length",o.length);return}const n=s.map(i=>({...i}));let a=[...e.history,n];a.length>r&&(a=a.slice(a.length-r),console.log(`CONTEXT ACTION (updateRowsWithHistory): Limite history (${r}) raggiunto. Stato più vecchio rimosso.`)),console.log(`CONTEXT ACTION (updateRowsWithHistory): Stato precedente salvato. Dimensione History: ${a.length}`),t("history",a),t("data","rows",o),t("data","length",o.length)}function O(){console.log("CONTEXT ACTION: undoLastChange. Dimensione storico:",e.history.length);const o=e.history;if(o.length>0){const s=o[o.length-1];e.data&&s?(t("data","rows",s),t("data","length",s.length)):console.error("CONTEXT ERROR: Impossibile fare Undo perché data è null."),t("history",o.slice(0,-1)),console.log("CONTEXT: Undo completato. Dimensione storico:",e.history.length)}else console.log("CONTEXT: Nessuna modifica da annullare.")}function N(){if(console.log("CONTEXT ACTION: setOriginalData"),e.originalData){const o=e.originalData.rows.map(s=>({...s}));t("data",{headers:e.originalData.headers,rows:o,length:e.originalData.rows.length}),console.log("Original data has been set to data.")}else console.error("CONTEXT ACTION: No originalData available to set to data.")}export{N as a,u as b,e as c,p as d,T as i,d as r,C as s,O as u};
