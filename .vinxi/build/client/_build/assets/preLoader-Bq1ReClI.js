const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/runtime-DddzEQ-t.js","assets/preload-helper-CM3UJVvY.js","assets/index-BbP3371Q.js","assets/index-BAMY2Nnw.js","assets/index-CgqXENQe.js"])))=>i.map(i=>d[i]);
import{_ as S}from"./preload-helper-CM3UJVvY.js";import{j as h,k as r}from"./solid-DuWri35y.js";function g(){const[n,a]=r(!1),[p,s]=r(null),[i,c]=r(!1),l=new Set,[R,u]=r(!1);let o=null;const d=async()=>{if(n()||i())return n();c(!0),s(null),console.log("SplineLoader: Starting runtime preload...");try{if(o=(await S(()=>import("./runtime-DddzEQ-t.js"),__vite__mapDeps([0,1,2,3,4]))).Application,!o)throw new Error("Spline runtime module loaded but Application class not found.");return a(!0),console.log("SplineLoader: Runtime preloaded successfully."),!0}catch(e){return console.error("SplineLoader: Runtime preload failed:",e),s(e instanceof Error?e:new Error(String(e))),a(!1),!1}finally{c(!1)}},f=async e=>{if(!(!e||l.has(e))){console.log(`SplineLoader: Attempting to prefetch scene data for ${e}...`),u(!0);try{const t=await fetch(e,{cache:"force-cache"});t.ok?console.log(`SplineLoader: Prefetch for ${e} likely successful (status ${t.status}). Data might be cached.`):console.warn(`SplineLoader: Prefetch for ${e} failed with status ${t.status}. The actual load might still work.`)}catch(t){console.warn(`SplineLoader: Prefetch for ${e} threw an error:`,t)}finally{l.add(e),u(!1)}}};return{preloadRuntime:d,prefetchSceneData:f,preloadRuntimeAndScenes:async e=>{await d()?(console.log("SplineLoader: Runtime ready, starting scene prefetch..."),e.forEach(m=>f(m))):console.error("SplineLoader: Cannot prefetch scenes because runtime failed to load.")},getRuntime:()=>o,getRuntimeStatus:()=>({isLoading:i(),isReady:n(),error:p()})}}const A=h(g);export{A as default};
