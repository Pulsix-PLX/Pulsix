import{c as n,r}from"./store-EkIb7068.js";const[t,o]=n({currentStep:"upload",fileData:null,originalRows:null,history:[],mappingResult:null,errorMessage:null});function a(e){console.log(`STORE ACTION: setCurrentStep -> ${e}`),o("currentStep",e)}function g(e){console.log("STORE ACTION: initializeFileData");const s=e.rows.map(l=>({...l}));o("fileData",{headers:e.headers,rows:s,length:e.rows.length}),o("originalRows",s),o("history",[]),o("currentStep","preview"),o("errorMessage",null),o("mappingResult",null)}function c(e){if(console.log("STORE ACTION: updateRowsWithHistory"),!t.fileData||!t.fileData.rows){console.error("STORE ERROR: updateRowsWithHistory chiamato senza fileData.rows.");return}const s=t.fileData.rows.map(l=>({...l}));o("history",l=>[...l,s]),console.log(`STORE: Snapshot aggiunto. Dimensione storico: ${t.history.length}`),o("fileData","rows",r(e,{merge:!0})),o("fileData","length",e.length),console.log("STORE: fileData.rows aggiornato.")}function u(){console.log("STORE ACTION: undoLastChange. Dimensione storico:",t.history.length);const e=t.history;if(e.length>0){const s=e[e.length-1];t.fileData&&s?(o("fileData","rows",r(s,{merge:!0})),o("fileData","length",s.length)):console.error("STORE ERROR: Impossibile fare Undo perché fileData è null."),o("history",l=>l.slice(0,-1)),console.log("STORE: Undo completato. Dimensione storico:",t.history.length)}else console.log("STORE: Nessuna modifica da annullare.")}function R(){console.log("STORE ACTION: resetDataToOriginal.");const e=t.originalRows;if(!e){console.error("STORE ERROR: Reset fallito. Dati originali non disponibili.");return}if(t.history.length===0){console.log("STORE: Nessuna modifica registrata da resettare.");return}if(console.log(`STORE: Reset in corso. Ripristino ${e.length} righe.`),t.fileData)o("fileData","rows",r(e,{merge:!0})),o("fileData","length",e.length);else{console.error("STORE ERROR: Impossibile resettare perché fileData è null.");return}o("history",[]),console.log("STORE: Reset completato.")}function h(e){console.log("STORE ACTION: setMappingResult"),o("mappingResult",e)}function p(e){console.log(`STORE ACTION: setErrorMessage -> ${e}`),o("errorMessage",e)}function f(){console.log("STORE ACTION: resetProcess totale."),o({currentStep:"upload",fileData:null,originalRows:null,history:[],mappingResult:null,errorMessage:null})}export{p as a,R as b,t as c,u as d,h as e,g as i,f as r,a as s,c as u};
