import t from"vite-plugin-node-polyfills/shims/process";import*as E from"bcryptjs";import{v4 as T}from"uuid";import{b as R,u as C}from"./assets/fetchEvent-BW7O4Ysp.js";import{d as h}from"./assets/db.server-CDeyn5Z_.js";import{g as A,a as D}from"./assets/utils-Be6c5Kfn.js";import{j as s}from"./assets/response-CbUr9JDj.js";import"h3";import"vite-plugin-node-polyfills/shims/global";import"node:async_hooks";import"pg";import"./assets/server-fns-runtime-DEO2-sKc.js";import"solid-js/web";import"solid-js/web/storage";import"jose";import"jsonwebtoken";async function j(r){const f=Number(t.env.BCRYPT_COST)||12;let i;try{i=await r.request.json()}catch{return s({success:!1,message:"Corpo della richiesta non valido o mancante."},{status:400})}const{username:c,password:u}=i;if(!c||!u)return s({success:!1,message:"Username e password sono obbligatori."},{status:400});try{const a=await h.query("SELECT id, username, password, state FROM auth.users WHERE username = $1",[c]);if(a.rows.length===0)return s({success:!1,message:"Credenziali non valide."},{status:401});const e=a.rows[0];if(e.state=="suspended")return console.log("user sospended",e.id),s({success:!1,message:"user sospended."},{status:401});if(e.state=="blocked")return console.log("user blocked",e.id),s({success:!1,message:"user blocked."},{status:401});if(!await E.compare(u,e.password))return console.log("password wrong"),s({success:!1,message:"Credenziali non valide."},{status:401});const d=r.request.headers.get("x-forwarded-for")?.split(",")[0].trim()||r.clientAddress||"unknown",l=r.request.headers.get("user-agent")||"";console.log(d,l);const _=Number(e.id),p=A(_),n=await D();console.log("Access token: ",p),console.log("Refresh token: ",n);const m=await E.hash(n.token,f),S=n.expires_at;console.log(m);const w=`
    INSERT INTO auth.active_sessions
      (id, user_id, ip_address, device_info, last_active, token_hash, expires_at, created_at)
    VALUES
      ($1, $2, $3, $4, $5, $6, $7, $8)
    ON CONFLICT (user_id) -- !! Richiede un vincolo UNIQUE o PRIMARY KEY su user_id !!
    DO UPDATE SET
      ip_address = EXCLUDED.ip_address,     -- Aggiorna IP con quello nuovo da $3
      device_info = EXCLUDED.device_info,  -- Aggiorna info device con quelle nuove da $4
      token_hash = EXCLUDED.token_hash,    -- Aggiorna con il NUOVO hash del token da $6
      expires_at = EXCLUDED.expires_at,    -- Aggiorna con la NUOVA scadenza da $7
      last_active = CURRENT_TIMESTAMP;     -- Aggiorna sempre l'ultimo accesso all'ora attuale
`,k=[T(),e.id,d,l,new Date,m,S.toISOString(),new Date];try{await h.query(w,k),console.log(`[Login/Session] Record in auth.active_sessions inserito/aggiornato per user ${e.id}`)}catch(o){console.error(`[Login/Session] Errore durante INSERT/UPDATE in auth.active_sessions per user ${e.id}:`,o)}const g=Number(t.env.REFRESH_TOKEN_EXPIRY||1209600),v=new Date(Date.now()+g*1e3);try{R(r.nativeEvent,"refresh_token",n.token,{httpOnly:!0,secure:t.env.ENV==="production",sameSite:"strict",expires:v,path:"/",maxAge:g})}catch(o){return console.error("Error setting refresh token cookie:",o),s({success:!1,message:"Errore durante l'impostazione del cookie di sessione."},{status:500})}try{await(await C(r.nativeEvent,{password:t.env.SESSION_SECRET,name:t.env.JWT_ISSUER,cookie:{maxAge:86400,secure:t.env.ENV==="production",httpOnly:!0,sameSite:"lax"}})).update({userId:e.id,username:e.username}),console.log(`Login: Sessione server-side aggiornata per userId: ${e.id}`)}catch(o){console.error("Login: Errore aggiornamento sessione server-side:",o)}return s({accessToken:p})}catch(a){return console.error("Errore durante il processo di login:",a),s({success:!1,message:"Errore interno del server durante il login."},{status:500})}}export{j as POST};
