import{c as $}from"./assets/server-fns-runtime-DEO2-sKc.js";import{d as g}from"./assets/db.server-CDeyn5Z_.js";import{z as a}from"zod";import{j as s}from"./assets/response-CbUr9JDj.js";import"solid-js/web";import"solid-js/web/storage";import"./assets/fetchEvent-BW7O4Ysp.js";import"h3";import"vite-plugin-node-polyfills/shims/global";import"node:async_hooks";import"vite-plugin-node-polyfills/shims/process";import"pg";const I=a.object({cause:a.string().nullable(),amount:a.number().positive().nullable(),date:a.string().nullable(),type:a.enum(["Income","Expense"]).nullable(),category_id:a.string().nullable(),subCategory_id:a.string().nullable()}).strict(),h=a.object({walletId:a.number().int().positive(),transactions:a.array(I)}).strict();class u extends Error{index;transactionData;constructor(c,p,r){super(c),this.name="RowProcessingError",this.index=p,this.transactionData=r}}const T=$(async function(c){const r=c.locals.user?.id;if(!r)return console.error("FATAL: User ID not found in event.locals for addTransactions endpoint!"),s({success:!1,message:"Utente non autorizzato o errore interno."},{status:401});let d;try{const e=await c.request.json();if(d=h.parse(e),d.transactions.length===0)return s({success:!1,message:"Nessuna transazione valida fornita per l'importazione."},{status:400})}catch(e){return console.error("Errore parsing o validazione payload (Zod):",e),e instanceof a.ZodError?s({success:!1,message:"Payload non valido.",errors:e.errors},{status:400}):s({success:!1,message:"Payload della richiesta non valido o malformato."},{status:400})}const{walletId:n,transactions:m}=d;let o=0;try{if((await g.query("SELECT 1 FROM public.wallets WHERE id = $1 AND user_id = $2",[n,r])).rowCount===0)return console.warn(`Tentativo di import nel wallet ${n} non trovato o non appartenente all'utente ${r}.`),s({success:!1,message:`Wallet di destinazione (ID: ${n}) non trovato o non accessibile.`},{status:400})}catch(e){return console.error(`Errore DB controllo wallet ${n} per utente ${r}:`,e),s({success:!1,message:"Errore interno durante la verifica del wallet."},{status:500})}const l=await g.connect();try{await l.query("BEGIN"),console.log(`SERVER: Inizio inserimento atomico di ${m.length} transazioni nel wallet ${n} per user ${r}.`);for(let e=0;e<m.length;e++){const t=m[e];if(t.amount===null||t.amount<=0)throw new u("Importo non valido o mancante.",e,t);if(t.type===null)throw new u("Tipo transazione (Income/Expense) non determinato.",e,t);let i;try{if(!t.date)throw new Error("Data mancante");if(i=new Date(t.date),isNaN(i.getTime()))throw new Error("Formato data non valido")}catch(y){throw new u(`Data non valida (${y.message}): "${t.date}"`,e,t)}const E=`
            INSERT INTO public.transactions
            (cause, amount, wallet_id, type, category_id, subCategory_id, "date", user_id)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            RETURNING id`,f=[t.cause,t.amount,n,t.type,t.category_id,t.subCategory_id,i.toISOString(),r];await l.query(E,f),o++}return await l.query("COMMIT"),console.log(`SERVER: COMMIT Eseguito. ${o} transazioni inserite con successo per wallet ${n}, user ${r}.`),s({success:!0,message:`Importazione completata con successo. ${o} transazioni inserite.`,insertedCount:o},{status:200})}catch(e){console.error("[Server Bulk Insert] Errore durante l'inserimento - Esecuzione ROLLBACK. Righe processate prima errore:",o,"Errore:",e.message),await l.query("ROLLBACK");let t=`Errore durante l'importazione alla riga ${o+1}. Importazione annullata.`;e.message;let i=500;return e instanceof u?(t=`Errore alla riga ${e.index+1}: ${e.message}. Importazione annullata.`,e.message,i=400):t=`Errore database o interno alla riga ${o+1}. Importazione annullata.`,s({success:!1,message:t,processedSuccessfully:o},{status:i})}finally{l.release()}},"src_routes_API_Wallets_Wallet_addTransactionByFile_addTransactions_ts--POST_1","C:/Users/Matteo/Desktop/Pulsix/src/routes/API/Wallets/Wallet/addTransactionByFile/addTransactions.ts?pick=POST&tsr-directive-use-server="),A=T;export{A as POST};
